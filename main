import board, time, neopixel, digitalio
from adafruit_debouncer import Debouncer

button_input1 = digitalio.DigitalInOut(board.D2)
button_input1.switch_to_input(pull=digitalio.Pull.UP)
button1 = Debouncer(button_input1)

button_input2 = digitalio.DigitalInOut(board.D3)
button_input2.switch_to_input(pull=digitalio.Pull.UP)
button2 = Debouncer(button_input2)

button_input3 = digitalio.DigitalInOut(board.D4)
button_input3.switch_to_input(pull=digitalio.Pull.UP)
button3 = Debouncer(button_input3)

button_input4 = digitalio.DigitalInOut(board.D5)
button_input4.switch_to_input(pull=digitalio.Pull.UP)
button4 = Debouncer(button_input4)


cards =['A', 'A', 'A', 'A', 2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10]
dealer_val = 0
my_vals = []

def get_dealer():
    global dealer_val
    dealer = 1
    while dealer:
        button1.update()
        button2.update()
        if button1.fell:
            dealer_val += 1
            print(dealer_val)
        if button2.fell:
            dealer = 0
    print("dealer val saved")
    print("dealer val is: ", dealer_val)
    return dealer_val

def input_cards():
    card = 1
    my_val = 0
    global my_vals
    while card:
        button1.update()
        button2.update()
        if button1.fell:
            my_val += 1
            print(my_val)
        if button2.fell:
            card = 0
    my_vals.append(my_val)
    print("card val saved")
    print("card val is: ", my_val)
    return my_val
    
def EX_popper(dealer_val):
    global cards
    if dealer_val == 11 or dealer_val == 1:
        cards.pop(cards.index('A'))
    else:
        cards.pop(cards.index(dealer_val))

def EX_popper1(my_vals):
    global cards
    if my_vals == 11 or my_vals == 1:
        cards.pop(cards.index('A'))
    elif my_vals == 0:
        return
    else:
        cards.pop(cards.index(my_vals))

def get_EX(my_vals):
    global cards
    count = 0
    if sum(my_vals) > 10:
        if cards.count('A') == 4:
            count += 14
        elif cards.count('A') == 3:
            count += 13
        elif cards.count('A') == 2:
            count += 12
        elif cards.count('A') == 1:
            count += 11
        for card in cards:
            if card == 'A':
                continue
            else: 
                count += card
        return count / len(cards)
    if sum(my_vals) == 10:
        for card in cards:
            if card == 'A':
                count += 11
            else: 
                count += card
        return count / len(cards)
    if sum(my_vals) < 10:
        for card in cards:
            if card == 'A':
                count += 1
            else: 
                count += card
        return count / len(cards)

def new_turn():
    global dealer_val
    global my_vals
    my_vals = []
    dealer_val=0
    return
    
def turn():
    get_dealer()
    EX_popper(dealer_val)
    button3.update()
    while True:
        EX_popper1(input_cards())
        print(get_EX(my_vals))
        print(cards)
        if input_cards() == 0:
            break
    return
        

def main():
    button2.update()
    while True:
        turn()
        if button2.fell:
            new_turn()
            print("new turn!")
        
main()# Write your code here :-)
